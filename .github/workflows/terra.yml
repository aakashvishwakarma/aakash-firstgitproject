name: 'Terraform'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  bridgecrew:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Run Bridgecrew 
      id: Bridgecrew
      uses: bridgecrewio/bridgecrew-action@master
      with:
        api-key: ${{ secrets.API_KEY }}
        soft_fail: true  #This line will successfull run the code without error.
      env:  
        GITHUB_REPOSITORY: ${{ github.repository }}
          #GITHUB_REF: ${{ github.ref }}    #It refer to the git hub head
         # GITHUB_SHA: ${{ github.sha }}    # It will show Sha og last commit which triggered this workflow. You can verify that via cmnd-git log in git bash.
          #GITHUB_SERVER_URL: $GITHUB_SERVER_URL  # It will return the server url. 
    - name: Expose report     //It is use to export the scan result in sarif form.
      uses: actions/upload-artifact@v2
      with:
        name: SARIF results
        path: results.sarif
    # Uploads results.sarif to GitHub repository using the upload-sarif action
    - uses: github/codeql-action/upload-sarif@v1
      with:
        # Path to SARIF file relative to the root of the repository
         sarif_file: results.sarif
         
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check
    
    #Configuring aws_credentials
    #- name: Configure AWS Credentials
    #  uses: aws-actions/configure-aws-credentials@v1
     # with:
      #  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       # # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # if you have/need it
       # aws-region: us-east-1

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
    - name:   Show status file content after apply
      run: cat status.txt
      
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      
    - name:    Show status file content after destroy
      run:    cat status.txt

